# -*- coding: utf-8 -*-
"""recording_tool.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L3vAQ6C3w6pti6H20XHknZMunM6JZZw1
"""

def recording_tool(ld1_filenamewav):
  # Javascript injection is really cool it turns out.
  from IPython.display import display, Javascript, HTML, clear_output

  from google.colab import output
  output.enable_custom_widget_manager()

  # Create the file for storing recordings.
  recording_directory = "./.recordings/"
  ld1_filenamewebm = recording_directory + ld1_filenamewav


  def hide_cell():
      display(Javascript(r"""
      var output_area = this;
      var cell_element = output_area.element.parents('.cell');
      var input_element = cell_element.find('.input');
      input_element.hide();
      """))
      
  def hide_next_cell():
      display(Javascript(r"""
      var output_area = this;
      var cell_element = output_area.element.parents('.cell').next();
      var input_element = cell_element.find('.input');
      input_element.hide();
      """))

  display(HTML("""
  <html>
      <head>
          <style>
          .titleDiv { 
            text-align: center;
            vertical-align: middle;
            width: 60%;
            margin = 'auto auto'
          }
          .centerPseudo {
              text-align:center;
              width: 60%;
              margin-left: auto;
              margin-right: auto;
          }
          </style>
      </head>
      <body>
          <div class="centerPseudo">
              <h2>Recording Tool</h2>
              </div>
      </body>
  </html>
  """))

  hide_cell()

  ## DEFINTION OF RECORDER
  import ipywebrtc as rtc
  # Creater a CameraStream object that only records audio
  microphone = rtc.CameraStream(constraints = {'audio': { 'channelCount': 2 }, 'video':False})
  # Create an AudioRecorder object that listens to the microphone
  recorder = rtc.AudioRecorder(stream=microphone, format='webm;codecs=opus')

  ## DEFINITION OF SAVE TO SERVER
  import ipywidgets as widgets
  import os
  from subprocess import run, PIPE
  import time
  from scipy.io import wavfile


  # Create the directory if it does not exist
  if not os.path.exists(recording_directory):
      os.mkdir(recording_directory)


  def save_recording(button):
      if(len(recorder.audio.value) == 0):
          print("No audio found in recorder state. Please record audio before attempting to save to server!")
      else:
          # Save webm to file
          recorder.save(ld1_filenamewebm)
          # Convert to fmmpeg 
          result = run(['ffmpeg', '-y', '-i', ld1_filenamewebm, '-c:a', 'pcm_f32le', \
                        ld1_filenamewav], stdout=PIPE, stderr=PIPE, universal_newlines=True)
          samplerate, data = wavfile.read(ld1_filenamewav)
          print("""Wave recording of {nsamples} samples at {samplerate} Hz succesfully as \'{filename}\'"""\
                .format(filename = ld1_filenamewav, nsamples=len(data), samplerate=samplerate))
          if(data[0].size == 1):
              print("Note: Recording only contains single channel. Please use the sound card!")

  # FORMATTING DONE WITH JAVASCRIPT HACKS... Use widget styling instead?
  button = widgets.Button(description="Save to Server")
  button.on_click(save_recording)

  # DISPLAY
  script = r"""
  var output_area = this;
  console.log(output_area)
  var cell_element = output_area.element.parents('.cell');

  function waitFor(condition, callback) {
      if(!condition()) {
          console.log('waiting');
          window.setTimeout(waitFor.bind(null, condition, callback), 100); /* this checks the flag every 100 milliseconds*/
      } else {
          console.log('done');
          callback();
      }
  }

  waitFor(() => cell_element.find('.p-Widget').length > 0, () => {
      var widgets = cell_element.find('.p-Widget');
      widgets[0].style.margin = '0pt auto'
      widgets[0].style.width = '40%'

      var recording_element = widgets.find('.widget-inline-hbox');
      recording_element[0].style.width = '100%'
      var audio_element = widgets[0].getElementsByTagName('audio')
      audio_element[0].style.width = '100%'
      var button = widgets[0].getElementsByTagName('button')
      button[2].style.margin = '0pt 1pt'
      button[2].style.width = '100.00%'
  })
  """

  box = widgets.VBox(children=[recorder, widgets.HBox([button])], layout=widgets.Layout(align_items = 'stretch'))
  box_layout = widgets.Layout(display='flex',
                  flex_flow='column',
                  align_items='center')
  display(box, Javascript(script))
  print("Recorder Log:")
  #display(box)

  time.sleep(2)